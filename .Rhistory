ggplot(alc_orig, aes(x= G3, y=factor(high_use))) + geom_point() + facet_grid(. ~ sex) + stat_smooth(method="lm", col="red", size=2) + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= G3, y=factor(high_use))) + geom_point() + facet_grid(. ~ sex) + stat_smooth(method="lm", col="red") + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= G3, y=factor(high_use))) + geom_bar() + facet_grid(. ~ sex) + stat_smooth(method="lm", col="red") + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= G3, col=high_use)) + geom_bar() + facet_grid(. ~ sex) + stat_smooth(method="lm", col="red") + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= G3, col=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= internet, col=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= internet, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Final grade vs. high alcohol use")
ggplot(alc_orig, aes(x= internet, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Internet at home vs. high alcohol use")
ggplot(alc_orig, aes(x= studytime, y=G3, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Internet at home vs. high alcohol use")
ggplot(alc_orig, aes(x= studytime, y=G3, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Internet at home vs. high alcohol use")
ggplot(alc_orig, aes(x= studytime, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Studytime vs. high alcohol use")
ggplot(alc_orig, aes(x= studytime, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Studytime vs. high alcohol use") + xlab("Studytime") + ylab("number of observations")
ggplot(alc_orig, aes(x= studytime, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Studytime vs. high alcohol use") + xlab("Studytime") + ylab("The distribution of observations")
ggplot(alc_orig, aes(x= internet, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Internet at home vs. high alcohol use")
ggplot(alc_orig, aes(x= high_use, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Sex vs high alcohol use") + ylab("The distribution of observations") + xlab("High alcohol usage")
ggplot(alc_orig, aes(x= high_use, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Sex vs high alcohol use") + ylab("The distribution of observations") + xlab("High alcohol usage") + guides(fill=guide_legend(title="New Legend Title"))
ggplot(alc_orig, aes(x= high_use, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Sex vs high alcohol use") + ylab("The distribution of observations") + xlab("High alcohol usage") + guides(fill=guide_legend(title=""))
ggplot(alc_orig, aes(x= internet, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Internet at home vs. high alcohol use") + ylab("The number of cases") + xlab("Internet at home")
ggplot(alc_orig, aes(x= internet, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Internet at home vs. high alcohol use") + ylab("The number of cases") + xlab("Internet at home") + guides(fill=guide_legend(title="High usage of alcohol"))
ggplot(alc_orig, aes(x= studytime, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Studytime vs. high alcohol use") + xlab("Studytime") + ylab("The number of cases")
ggplot(alc_orig, aes(x= studytime, fill=high_use)) + geom_bar() + facet_grid(. ~ sex) + ggtitle("Studytime vs. high alcohol use") + xlab("Studytime") + ylab("The number of cases") + guides(fill=guide_legend(title="High usage of alcohol"))
alc1 <- alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade= mean(G3))
alc1
g1 + geom_boxplot() + ylab("Final grade") + xlab("High alcohol usage")
g1 + geom_boxplot() + ylab("Final grade") + xlab("High alcohol usage") + ggtitle("Final grade vs High alcohol usage and sex")
install.packages("BOSTON)
install.packages("BOSTON")
install.packages("BOSTON")
install.packages("MASS")
library(Boston)
library("Boston")
library("Boston")
library(Boston)
library("MASS")
str("Boston")
str(Boston)
install.packages("MASS")
install.packages("MASS")
library("MASS")
str(Boston)
dim(Boston)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
dim(hd)
str(gii)
dim(gii)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Explore the dataset
str(hd)
dim(hd)
summary(hd)
summary(gii)
names(hd)
names(gii)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
# Read the “Human development” and “Gender inequality” datas into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Explore the datasets
# Human development - structure and dimensions
str(hd)
dim(hd)
# Gender inequality - structure and dimensions
str(gii)
dim(gii)
# Summary of Human development data
summary(hd)
summary(gii)
# Current names of variables - Human development
names(hd)
# Current names of variables - Gender inequality
names(gii)
library(dplyr)
rename(hd, "HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex", "Life.Expectancy.at.Birth" = "EduMeanYrs","LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI" )
rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex", "Life.Expectancy.at.Birth" = "EduMeanYrs","LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI") )
names(hd)
library(plyr)
rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex", "Life.Expectancy.at.Birth" = "EduMeanYrs","LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI"))
rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex", "Life.Expectancy.at.Birth" = "EduMeanYrs","Life.Expectancy.at.Birth"="LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI"))
rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex",  "Life.Expectancy.at.Birth"="LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "EduMeanYrs", "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI"))
names(hd)
str(hd)
names(hd) <- c("HumDevRank", "Country", "HumDevIndex", "LifeExpBirth", "EduExpYrs", "EduMeanYrs", "GNI", "GNIMinusHDI")
names(hd)
str(hd)
# Change  Human Development dataframe variable names to the following: GendIneqRank, Country, GendIneqIndex, MatMortRat, AdolBirthRate, ParlPercRepres, EduSecondFemale, EduSecondMale, LabParticipFemale, LabParticipMale
names(hd) <- c("GendIneqRank", "Country", "GendIneqIndex", "MatMortRat", "AdolBirthRate", "ParlPercRepres", "EduSecondFemale", "EduSecondMale", "LabParticipFemale", "LabParticipMale")
names(hd)
str(hd)
names(hd) <- c("HumDevRank", "Country", "HumDevIndex", "LifeExpBirth", "EduExpYrs", "EduMeanYrs", "GNI", "GNIMinusHDI")
names(hd)
names(gii)
# Change  Human Development dataframe variable names to the following: GendIneqRank, Country, GendIneqIndex, MatMortRat, AdolBirthRate, ParlPercRepres, EduSecondFemale, EduSecondMale, LabParticipFemale, LabParticipMale
names(gii) <- c("GendIneqRank", "Country", "GendIneqIndex", "MatMortRat", "AdolBirthRate", "ParlPercRepres", "EduSecondFemale", "EduSecondMale", "LabParticipFemale", "LabParticipMale")
names(hd)
str(hd)
names(gii)
str(gii)
# Read the “Human development” and “Gender inequality” datas into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# load dplyr
library(dplyr)
# library(plyr) I chose another wy to change the variable names, so I don't need plyr
# Explore the datasets
# Human development - structure and dimensions
str(hd)
dim(hd)
# Gender inequality - structure and dimensions
str(gii)
dim(gii)
# Create summaries of variables
# Summary of Human development data
summary(hd)
summary(gii)
#Look at the meta files and rename the variables with (shorter) descriptive names. (1 point)
# Current names of variables - Human development
names(hd)
# Change  Human Development dataframe variable names to the following: HumDevRank, Country, HumDevIndex, LifeExpBirth, EduExpYrs, EduMeanYrs, GNI, GNIMinusHDI
# rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex",  "Life.Expectancy.at.Birth"="LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "EduMeanYrs", "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI"))
names(hd)
str(hd)
names(hd) <- c("HumDevRank", "Country", "HumDevIndex", "LifeExpBirth", "EduExpYrs", "EduMeanYrs", "GNI", "GNIMinusHDI")
names(hd)
str(hd)
# Current names of variables - Gender inequality
names(gii)
# Change  Human Development dataframe variable names to the following: GendIneqRank, Country, GendIneqIndex, MatMortRat, AdolBirthRate, ParlPercRepres, EduSecondFemale, EduSecondMale, LabParticipFemale, LabParticipMale
names(gii) <- c("GendIneqRank", "Country", "GendIneqIndex", "MatMortRat", "AdolBirthRate", "ParlPercRepres", "EduSecondFemale", "EduSecondMale", "LabParticipFemale", "LabParticipMale")
names(gii)
str(gii)
#Mutate the “Gender inequality” data and create two new variables. The first one should be the ratio of Female and Male populations with secondary education in each country. (i.e. edu2F / edu2M). The second new variable should be the ratio of labour force participation of females and males in each country (i.e. labF / labM). (1 point)
#oin together the two datasets using the variable Country as the identifier. Keep only the countries in both data sets (Hint: inner join). Call the new joined data human and save it in your data folder. (1 point)
mutate(gii, EduF2M = EduSecondFemale/EduSecondMale, LabF2M = LabParticipFemale/LabParticipMale)
names(gii)
dim(gii)
gii <- mutate(gii, EduF2M = EduSecondFemale/EduSecondMale, LabF2M = LabParticipFemale/LabParticipMale)
names(gii)
dim(gii)
# Read the “Human development” and “Gender inequality” datas into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# load dplyr
library(dplyr)
# library(plyr) I chose another wy to change the variable names, so I don't need plyr
# Explore the datasets
# Human development - structure and dimensions
str(hd)
dim(hd)
# Gender inequality - structure and dimensions
str(gii)
dim(gii)
# Create summaries of variables
# Summary of Human development data
summary(hd)
summary(gii)
#Look at the meta files and rename the variables with (shorter) descriptive names. (1 point)
# Current names of variables - Human development
names(hd)
# Change  Human Development dataframe variable names to the following: HumDevRank, Country, HumDevIndex, LifeExpBirth, EduExpYrs, EduMeanYrs, GNI, GNIMinusHDI
# rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex",  "Life.Expectancy.at.Birth"="LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "EduMeanYrs", "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI"))
names(hd)
str(hd)
names(hd) <- c("HumDevRank", "Country", "HumDevIndex", "LifeExpBirth", "EduExpYrs", "EduMeanYrs", "GNI", "GNIMinusHDI")
names(hd)
str(hd)
# Current names of variables - Gender inequality
names(gii)
# Change  Human Development dataframe variable names to the following: GendIneqRank, Country, GendIneqIndex, MatMortRat, AdolBirthRate, ParlPercRepres, EduSecondFemale, EduSecondMale, LabParticipFemale, LabParticipMale
names(gii) <- c("GendIneqRank", "Country", "GendIneqIndex", "MatMortRat", "AdolBirthRate", "ParlPercRepres", "EduSecondFemale", "EduSecondMale", "LabParticipFemale", "LabParticipMale")
names(gii)
str(gii)
#Mutate the “Gender inequality” data and create two new variables. The first one should be the ratio of Female and Male populations with secondary education in each country. (i.e. edu2F / edu2M). The second new variable should be the ratio of labour force participation of females and males in each country (i.e. labF / labM). (1 point)
gii <- mutate(gii, EduF2M = EduSecondFemale/EduSecondMale, LabF2M = LabParticipFemale/LabParticipMale)
#join together the two datasets using the variable Country as the identifier. Keep only the countries in both data sets (Hint: inner join). Call the new joined data human and save it in your data folder. (1 point)
names(gii)
human <- inner_join(hd, gii, by = "Country")
dim(human)
str(human)
glimpse(human)
# Next we'll save the wrangled and modified data as a .csv file
write.csv(human, "/Users/gyandookie/IODS-project/data/alc_mod.csv", row.names = FALSE)
# Next we'll save the wrangled and modified data as a .csv file
write.csv(human, "/Users/gyandookie/IODS-project/data/human.csv", row.names = FALSE)
# Let's double check the saved file by loading it and printing some of it's contents back to the console
# Important: the separator is a comma (",") as the file extension .csv implies
human <- read.csv("/Users/gyandookie/IODS-project/data/human.csv",sep=",", header=TRUE)
glimpse(human)
# Read the “Human development” and “Gender inequality” datas into R
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# load dplyr
library(dplyr)
# library(plyr) I chose another why to change the variable names, so I don't need the plyr package
# Explore the datasets
# Human development - structure and dimensions
str(hd)
dim(hd)
# Gender inequality - structure and dimensions
str(gii)
dim(gii)
# Create summaries of variables
# Summary of Human development data
summary(hd)
summary(gii)
#Look at the meta files and rename the variables with (shorter) descriptive names. (1 point)
# Current names of variables - Human development
names(hd)
str(hd)
# Change  Human Development dataframe variable names to the following: HumDevRank, Country, HumDevIndex, LifeExpBirth, EduExpYrs, EduMeanYrs, GNI, GNIMinusHDI
# rename(hd, c("HDI.Rank" = "HumDevRank", "Human.Development.Index..HDI." = "HumDevIndex",  "Life.Expectancy.at.Birth"="LifeExpBirth","Expected.Years.of.Education"="EduExpYrs","Mean.Years.of.Education"= "EduMeanYrs", "Gross.National.Income..GNI..per.Capita"="GNI", "GNI.per.Capita.Rank.Minus.HDI.Rank"="GNIMinusHDI"))
names(hd) <- c("HumDevRank", "Country", "HumDevIndex", "LifeExpBirth", "EduExpYrs", "EduMeanYrs", "GNI", "GNIMinusHDI")
names(hd)
str(hd)
# Current names of variables - Gender inequality
names(gii)
# Change  Human Development dataframe variable names to the following: GendIneqRank, Country, GendIneqIndex, MatMortRat, AdolBirthRate, ParlPercRepres, EduSecondFemale, EduSecondMale, LabParticipFemale, LabParticipMale
names(gii) <- c("GendIneqRank", "Country", "GendIneqIndex", "MatMortRat", "AdolBirthRate", "ParlPercRepres", "EduSecondFemale", "EduSecondMale", "LabParticipFemale", "LabParticipMale")
names(gii)
str(gii)
#Mutate the “Gender inequality” data and create two new variables. The first one should be the ratio of Female and Male populations with secondary education in each country. (i.e. edu2F / edu2M). The second new variable should be the ratio of labour force participation of females and males in each country (i.e. labF / labM). (1 point)
gii <- mutate(gii, EduF2M = EduSecondFemale/EduSecondMale, LabF2M = LabParticipFemale/LabParticipMale)
names(gii)
#join together the two datasets using the variable Country as the identifier. Keep only the countries in both data sets (Hint: inner join). Call the new joined data human and save it in your data folder. (1 point)
# Here we join the two datasets by the selected identifier
#human <- inner_join(hd, gii, by = "Country", suffix=c(".hd", ".gii")) Let's not include the suffix argument, because it wasn't asked for in the exercise
human <- inner_join(hd, gii, by = "Country")
# Let's take a look at the new joined dataset to be sure everything is ok
dim(human)
glimpse(human)
# Next we'll save the wrangled and modified data as a .csv file
write.csv(human, "/Users/gyandookie/IODS-project/data/human.csv", row.names = FALSE)
# Let's double check the saved file by loading it and printing some of it's contents back to the console
# Important: the separator is a comma (",") as the file extension .csv implies
human <- read.csv("/Users/gyandookie/IODS-project/data/human.csv",sep=",", header=TRUE)
glimpse(human)
pairs(Boston)
pairs("Boston")
pairs(Boston[1:19])
pairs("Boston"[1:19])
B1 <- Boston
B1 <- "Boston"
dim(Boston)
install.packages("MASS", repos= "http://cran.us.r-project.org")
# 2. Load the Boston data with library()
# The library function seems to work with and without the ""
library(MASS)
# I noticed, that you can use the Boston data without loading with data (if you loaded MASS with the library() function. Nevertheless, let's anyway use data as in the Datacamp exercise)
data("Boston")
dim(Boston)
str(Boston)
pairs(B1[1:19])
B1 <- Boston
pairs(B1[1:19])
dim(B1)
pairs(data=B1, ~crim,zn,indus)
pairs(data=B1, ~crim,zn)
summary(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)%>% round(2)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos = "d", tl.cex=0.6)
Install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
cor_matrix<-cor(Boston)%>% round(2)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos = "d", tl.cex=0.6)
install.packages("corrplot")
library(corrplot)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos = "d", tl.cex=0.6)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
range <- c("low","med_low","med_high","high")
crime <- cut(scaled_crim, breaks = bins,label=range, include.lowest = TRUE)
# Now we can remove the original crim variable from the scaled dataset and add the categorical value to the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
boston_scaled
table(crime)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
---
title: "Chapter 4 - Clustering and Classification"
author: "Gyan Dookie"
date: "12 February 2017"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
#Load the Boston data from the MASS package
# 1. install the MASS package with install()
# Knitr produces a R session, without a default cran mirror unless you specifically asked for one. We tend to forget we need to set up CRAN for every R session when we use Rstudio because it takes care of it, but only for interactive use, not for knitr.
#You could try specifying a mirror as a install.packages argument
# ctrl+shif+c --> comment a block out
install.packages("MASS", repos= "http://cran.us.r-project.org")
install.packages("dplyr")
install.packages("corrplot")
library(dplyr)
library(corrplot)
# 2. Load the Boston data with library()
# The library function seems to work with and without the ""
library(MASS)
# I noticed, that you can use the Boston data without loading with data (if you loaded MASS with the library() function. Nevertheless, let's anyway use data as in the Datacamp exercise)
data("Boston")
#math <- read.table("/Users/gyandookie/IODS-project/data/student-mat.csv",sep=";", header=TRUE)
```
#Chapter 4 - The clustering and classification of the Housing values in the Suburbs of Boston -dataframe
##### The Boston dataframe that belongs to the MASS-package deals with housing values in suburbs of Boston. It's variables (altogether 14) cover mainly things that could affect housing values.
Below is the structure of the *Housing Values in Suburbs of Boston*. The following characteristics of the dataframe can be discerned.
* 14 variables
* Datatypes: numeric and integer
* 506 rows
*
```{r, echo=FALSE}
dim(Boston)
str(Boston)
```
<!--Show a graphical overview of the data (GD:how many variables / plot?) and show summaries of the variables in the data (GD: kertaa summary()-funktion toimita). Describe and interpret the outputs, commenting on the distributions of the variables and the relationships between them.-->
```{r, echo=FALSE}
B1 <- Boston
## Next we'll print out the summary
summary(Boston)
```
```{r, echo=FALSE}
# Then we'll take a look at the graphical overview
pairs(Boston)
```
```{r, echo=FALSE}
# Now it's time to get a clearer picture of the correlations and print them out with the corrplot() function. Here the correlations were rounded to two desimals to save space
cor_matrix<-cor(Boston)%>% round(2)
```
```{r, echo=FALSE}
# Now we'll visualize the correlation matrix. To reduce repetition, we'll visualize only the upper part of the plot (as is well known, the top part of the correlation matrix contains the same correlations as the bottom part)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos = "d", tl.cex=0.6)
```
<!-- Standardize the dataset and print out summaries of the scaled data. How did the variables change? Create a categorical variable of the crime rate in the Boston dataset (from the scaled crime rate). Use the quantiles as the break points in the categorical variable. Drop the old crime rate variable from the dataset. Divide the dataset to train and test sets, so that 80% of the data belongs to the train set. (2 points) -->
```{r, echo=FALSE}
# Next we'll center and standardize the variables
boston_scaled <- scale(Boston)
# Let's look at the summaries of the scaled variables and see how the variables changed ( e.g. the means)
summary(boston_scaled)
# Here we'll create a categorical dataset of the crime rate variable in the scaled Boston dataset using quantiles as the break points in the categorical variable.
# save the scaled crim as scaled_crim
scaled_crim <- boston_scaled$crim
# Let's take a look at the summary of the scaled crim variable and then create a quantile vector of it. After that we'll create a vector for the label names before cutting the scaled variable into bins
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
range <- c("low","med_low","med_high","high")
crime <- cut(scaled_crim, breaks = bins,label=range, include.lowest = TRUE)
# Now we can remove the original crim variable from the scaled dataset and add the categorical value to the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
boston_scaled
table(crime)
# Let's drop the old crime rate variable from the dataset
# We will want to use the boston_scaled (which is an object right now) as a data frame. So now we'll change the object to data frame with as.data.frame() function. TARKISTA, PITIKÖ MUUTTAA DATAFRAMEKSI
## boston_scaled <- as.data.frame(boston_scaled)
# Here we'll divide the data in two parts: the train (80 %) and the test (20 %) sets
# first we'll get the numbers of rows and save it for the next step
n <- nrow(boston_scaled)
# Then we'll choose randomly 80 % of the data and create a train set
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
# Creating a test set (i.e. choosing the  20 % data that was not chosen by the sample() function) is based on what we did before
test <- boston_scaled[-ind,]
# Now we'll save the classes from the test data and remove the crime variable from the test data
# TARKISTA VIELÄ PITIKÖ NÄIN TEHDÄ
# correct_classes <- test$crime
# test <- dplyr::select(test, -crime)
```
<!-- Fit the linear discriminant analysis on the train set. Use the categorical crime rate as the target variable and all the other variables in the dataset as predictor variables. Draw the LDA (bi)plot. (3 points) -->
```{r, echo=FALSE}
```
<!-- Reload the Boston dataset and standardize the dataset (we did not do this in the Datacamp exercises, but you should scale the variables to get comparable distances). Calculate the distances between the observations. Run k-means algorithm on the dataset. Investigate what is the optimal number of clusters and run the algorithm again. Visualize the clusters (for example with the pairs() or ggpairs() functions, where the clusters are separated with colors) and interpret the results. (4 points) -->
```{r, echo=FALSE}
```
<!--
Save the crime categories from the test set and then remove the categorical crime variable from the test dataset (GD: mutate()?). Then predict the classes with the LDA model on the test data. Cross tabulate the results with the crime categories from the test set. Comment on the results. (3 points)
-->
install.packages("corrplot")
install.packages("MASS", repos = "http://cran.us.r-project.org")
install.packages("dplyr")
install.packages("corrplot")
install.packages("dplyr")
install.packages("MASS", repos = "http://cran.us.r-project.org")
install.packages("MASS", repos = "http://cran.us.r-project.org")
---
title: "Chapter 4 - Clustering and Classification"
author: "Gyan Dookie"
date: "12 February 2017"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
#Load the Boston data from the MASS package
# 1. install the MASS package with install()
# Knitr produces a R session, without a default cran mirror unless you specifically asked for one. We tend to forget we need to set up CRAN for every R session when we use Rstudio because it takes care of it, but only for interactive use, not for knitr.
#You could try specifying a mirror as a install.packages argument
# ctrl+shif+c --> comment a block out
install.packages("MASS", repos= "http://cran.us.r-project.org")
install.packages("dplyr")
install.packages("corrplot")
library(dplyr)
library(corrplot)
# 2. Load the Boston data with library()
# The library function seems to work with and without the ""
library(MASS)
# I noticed, that you can use the Boston data without loading with data (if you loaded MASS with the library() function. Nevertheless, let's anyway use data as in the Datacamp exercise)
data("Boston")
#math <- read.table("/Users/gyandookie/IODS-project/data/student-mat.csv",sep=";", header=TRUE)
```
#Chapter 4 - The clustering and classification of the Housing values in the Suburbs of Boston -dataframe
##### The Boston dataframe that belongs to the MASS-package deals with housing values in suburbs of Boston. It's variables (altogether 14) cover mainly things that could affect housing values.
Below is the structure of the *Housing Values in Suburbs of Boston*. The following characteristics of the dataframe can be discerned.
* 14 variables
* Datatypes: numeric and integer
* 506 rows
*
```{r, echo=FALSE}
dim(Boston)
str(Boston)
```
<!--Show a graphical overview of the data (GD:how many variables / plot?) and show summaries of the variables in the data (GD: kertaa summary()-funktion toimita). Describe and interpret the outputs, commenting on the distributions of the variables and the relationships between them.-->
```{r, echo=FALSE}
B1 <- Boston
## Next we'll print out the summary
summary(Boston)
```
```{r, echo=FALSE}
# Then we'll take a look at the graphical overview
pairs(Boston)
```
```{r, echo=FALSE}
# Now it's time to get a clearer picture of the correlations and print them out with the corrplot() function. Here the correlations were rounded to two desimals to save space
cor_matrix<-cor(Boston)%>% round(2)
```
```{r, echo=FALSE}
# Now we'll visualize the correlation matrix. To reduce repetition, we'll visualize only the upper part of the plot (as is well known, the top part of the correlation matrix contains the same correlations as the bottom part)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos = "d", tl.cex=0.6)
```
<!-- Standardize the dataset and print out summaries of the scaled data. How did the variables change? Create a categorical variable of the crime rate in the Boston dataset (from the scaled crime rate). Use the quantiles as the break points in the categorical variable. Drop the old crime rate variable from the dataset. Divide the dataset to train and test sets, so that 80% of the data belongs to the train set. (2 points) -->
```{r, echo=FALSE}
# Next we'll center and standardize the variables
boston_scaled <- scale(Boston)
# Let's look at the summaries of the scaled variables and see how the variables changed ( e.g. the means)
summary(boston_scaled)
# Here we'll create a categorical dataset of the crime rate variable in the scaled Boston dataset using quantiles as the break points in the categorical variable.
# save the scaled crim as scaled_crim
scaled_crim <- boston_scaled$crim
# Let's take a look at the summary of the scaled crim variable and then create a quantile vector of it. After that we'll create a vector for the label names before cutting the scaled variable into bins
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
range <- c("low","med_low","med_high","high")
crime <- cut(scaled_crim, breaks = bins,label=range, include.lowest = TRUE)
# Now we can remove the original crim variable from the scaled dataset and add the categorical value to the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
boston_scaled
table(crime)
# Let's drop the old crime rate variable from the dataset
# We will want to use the boston_scaled (which is an object right now) as a data frame. So now we'll change the object to data frame with as.data.frame() function. TARKISTA, PITIKÖ MUUTTAA DATAFRAMEKSI
## boston_scaled <- as.data.frame(boston_scaled)
# Here we'll divide the data in two parts: the train (80 %) and the test (20 %) sets
# first we'll get the numbers of rows and save it for the next step
n <- nrow(boston_scaled)
# Then we'll choose randomly 80 % of the data and create a train set
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
# Creating a test set (i.e. choosing the  20 % data that was not chosen by the sample() function) is based on what we did before
test <- boston_scaled[-ind,]
# Now we'll save the classes from the test data and remove the crime variable from the test data
# TARKISTA VIELÄ PITIKÖ NÄIN TEHDÄ
# correct_classes <- test$crime
# test <- dplyr::select(test, -crime)
```
<!-- Fit the linear discriminant analysis on the train set. Use the categorical crime rate as the target variable and all the other variables in the dataset as predictor variables. Draw the LDA (bi)plot. (3 points) -->
```{r, echo=FALSE}
```
<!-- Reload the Boston dataset and standardize the dataset (we did not do this in the Datacamp exercises, but you should scale the variables to get comparable distances). Calculate the distances between the observations. Run k-means algorithm on the dataset. Investigate what is the optimal number of clusters and run the algorithm again. Visualize the clusters (for example with the pairs() or ggpairs() functions, where the clusters are separated with colors) and interpret the results. (4 points) -->
```{r, echo=FALSE}
```
<!--
Save the crime categories from the test set and then remove the categorical crime variable from the test dataset (GD: mutate()?). Then predict the classes with the LDA model on the test data. Cross tabulate the results with the crime categories from the test set. Comment on the results. (3 points)
-->
title: "Chapter 4 - Clustering and Classification"
author: "Gyan Dookie"
date: "12 February 2017"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
#Load the Boston data from the MASS package
# 1. install the MASS package with install()
# Knitr produces a R session, without a default cran mirror unless you specifically asked for one. We tend to forget we need to set up CRAN for every R session when we use Rstudio because it takes care of it, but only for interactive use, not for knitr.
#You could try specifying a mirror as a install.packages argument
# ctrl+shif+c --> comment a block out
install.packages("MASS", repos= "http://cran.us.r-project.org")
install.packages("dplyr")
install.packages("corrplot")
